---
title: The Serverless Approach
publishedAt: '2022-04-16'
lastUpdated: ''
summary: "There are servers, they're just hidden from you. An overview of modern web-application infrastructure."
tags: ['serverless', 'cloud']
---

In today's web applications, there's typically a backend that listens for requests from a client
and returns a response.

The backend server digs up some needed data and sends back a parcel for the frontend client to display
an interface, which a person can then operate. More often than not, that interface would be a mobile
browser; for example, shoe shopping on your iPhone.

**Virtual machines**

Building on VMs is a time-consuming task that often requires dedicated operations people. You do basically everything except operate the hardware.

**IaaS**

Need expertise in building distributed systems and managing cloud infrastructure.

**PaaS**

Platform as a service is a form of cloud computing: run your software, hide some of the underlying infrastructure.

**Containers**

Containers are an excellent deployment and packaging solution especially when dependencies are in play. Containers are isolated and lightweight, but they need to be deployed to a server.

### APIs all the way down

Focus on the differentiating aspects of your application

- We've outsourced breadmaking, there are many similar things
- Trade your money for time to be able to focus on what you're amazing at
- If you only have an edge in one or two things, focus on that. You're not going to have an edge in 10 things.
- A book is an API, allowing access to a compressed version of someone's expertise and hard work so that you don't need to pay the same price they did.

**FaaS**

functions as a service allows you to provide custom code, associated
dependencies, and some configuration to dictate your desired performance
and access control characteristics. FaaS then executes this unit
(referred to as a _function_) on an invisible compute fleet with each
execution of your code receiving an isolated environment with its own disk,
memory, and CPU allocation. You pay only for the time your code runs.
A function is not a lightweight instance; instead, think of it as
akin to processes in an OS, where you can spawn as many as needed
by your application and then spin them down when your application isn't running.
